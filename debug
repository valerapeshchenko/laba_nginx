3*454*34545
3*26-5-5*320*6+32-2*78+54-3*20+4*5*6*6*34+10

сначала обрабатываються скобки, удаляется из исходной строки все лишнее, алгоритм продолжает работать,
 затем умножения и деления, алгоритм продолжает работать, происходят последние действия (сложения и вычитания)

какие есть проблемы: если есть только *, если выражение в скобках стоит в конце исходной строки, и
наверное, если только одни + b -.
+ есть bug в выражении -5-5
+ если перед скобками стоит знак + или -, то может случиться ситуация: 45+-54(result of statement in parenthen)
45+-
4+5
//test string 1
3*26-5-5*(320*6/4+32/3-2*78)+54-3*20+4*5*6/7*6*(34+103*20)+4*5*6*6+(5*3+4)-91*43-(23.35+54.03-23.76+8743.1+54.34*4.12)-3*26-5-325*(320*6+32+2*378)+54-3-20-43*78/5*89-236*6/9*(34+103*20)+4*5+36*6+(5*3+4)-91-43-(23+54+23+87*43+54*4)
4/5/6/3*5*2/4
//super_test
(23+45-43*4)-43-5+4-(34+100)+(54+54-300)-(15*3000-34+90*4*32)*3*26-5-5*(320*6+32-2*78)+54-3*20+4*5*6*6*(34+103*20)+4*5*6*6+(5*3+4)-91*43-(23+54-23+8743+54*4)-3*26-5-325*(320*6+32+2*378)+54-3-20-43*5*-236*6*(34+103*20)+4*5+36*6+(5*3+4)-91-43-(23+54+23+87*43+54*4)+(5+6)-(3-5+4)-(34+100)+(54+54-300)-(15*3000-34+90*4*32)*3*26-5-5*(320*6+32-2*78)+54-(3*20+4*5)*6*6*(34+103*20)+4*5*6*6+(5*3+4)-91*43-(23+54-23+8743+54*4)-3*26-5-325*(320*6+32+2*378)+54-3-20-43*5*-236*6*(34+103*20)+4*5+36*6+(5*3+4)-91-43-(23+54*4) - successful!

//go to the float
(23+45-43*4)-43-5+4-(34+100)+(54+54-300)-(15*3000-34+90*4*32)*3*26-5-5*(320*6+32-2*78)+54-3*20+4*5*6*6*(34+103*20)+4*5*6*6+(5*3+4)-91*43-(23+54-23+8743+54*4)-3*26-5-325*(320*6+32+2*378)+(54-3-2*0-43*5*-236*6)*(34+10-3*20)+4*5+36*6+(5*3+4)-91-43-(23+54+23+87*43+54*4)+(5+6)-(3-5+4)-(34+100)+(54+54-300)-(15*3000-34+90*4*32)*3*26-5-5*(320*6+32-2*78)+54-(3*20+4*5)*6*6*(34+103*20)+4*5*6*6+(5*3+4)-91*43-(23+54-23+8743+54*4)-3*26-5-325*(320*6+32+2*378)+54-3-20-43*5*-236*6*(34+103*20)+4*5+36*6+(5*3+4)-91-43-(23+54*4)

//test double
3.3*26.23-5.32-5.544*320.3*6.34+32.43-(2*78.5+54.13-3.76)*(20.32+4.2*5.54*6.10)*6.30*34.12+10.43

super-presuper test of clac:
5*3/2*45+65
3.3*34/26.23-5.32-5.544/65+56/5*320.3*6.34/5+32.43-(2*78.5/45*43/13-4+34+54.1332-3.76)/45+45/2*(20.32/34/54.3434*34-23+43-233*32+4.222*5.5432*6.10+32)*6.30*34.12+10.43/23
(5.45*3/2+45)

3.3*34/26.23-5.32-5.544/65+56/5*320.3*6.34/5+32.43-(2*78.5/45*43/13-4+34+54.1332-3.76)/45+45/2*(20.32/34/54.3434*34-23+43-233*32+4.222*5.5432*6.10+32)*6.30*34.12+10.43/23-(23+45-43*4)-43-5+4-(34+100)+(54+54-300)-(15*3000-34+90*4*32)*3*26-5-5*(320*6+32-2*78)+54-3*20+4*5*6*6*(34+103*20)+4*5*6*6+(5*3+4)-91*43-(23+54-23+8743+54*4)-3*26-5-325*(320*6+32+2*378)+(54-3-2*0-43*5*-236*6)*(34+10-3*20)+4*5+36*6+(5*5/3+4)-91-43-(23+98/354-34+23+87*43+54*4)+(5+6)-(3/4-5+4)-(34+100)+(54+54-300)-(15*3000-34+90*4*32)*3*26-5-5*(320*6+32-2*78)+54-(3*20+4*5)*6*6*(34+103*20)+4*5/4*6*6+(5*3+4)-91*43-(23+54-23+87/43+54*4)-3*2/6-5-325*(320*6+32+2*37/8)+54-3-20-43*5*-2/36*6*(34+103*20)+4*5+36*6+(5*3+4)-91-43-(23+5*43/34-4000*4)

//test string 2
3*26-5-5*(320*6+32-2*78)+54-3*20+4*5*6*6*(34+103*20)+4*(5*6*6)+(5*3+4)-91*43-(23+54*3)+8743+54*4
10+43-34
45*(34*54+10)
3*(56*34)*26-5-5*320*4-3*20+4*5*6*6*34+10
3*3+(56*34)*265*45-5-5*320*4-3*20+4*5*6*6*34+10
3*26-5-5*(4+5)*320*(6+32-2*43-78+54)-3*20*(5+6)+4*(5*6*6*34)+10
5*(4+5)*320*(4+5)*43*(334+43)-32-233*323+23342-232
3*26-5-5*320*6+32-(2*78+54-3)*(20+4*5*6)*6*34+10
(4+5)*5
5*(4+5)
10*345*54*34
10-23+32
-104.0-43-5+4+78.0+15
-104.0*43.45*5.0*4.76*78.0+155.0*4.76*78.0
3*1904.0*26
//double цифры пошли
24+34
145.0+324.423-324.133-32.0
145.0*324.423*324.133-32.0
выделение скобенчиков первого уровня
\([\d+\+\-\*]+\)


умножение:
[\+-]?(\d+[\*]-?\d+(([\*]-?\d*){1,})?){1,}

(\(.+\)|[^(\(.+\))])
(\(.+\))?
([\+-]|[^\+\*-])((\d*[\*]\d*)+){1,}
более менее, адекватная регулярка:
(\d+[\*]\d+(([\*]\d*){1,})?){1,}
альтернатива
\d+[\*]\d+(([\*]\d*){1,})?

1ый этап:
\d+(\*\(.+\))?[\*]\d+(([\*]\d*){1,})?

2ой этап:

